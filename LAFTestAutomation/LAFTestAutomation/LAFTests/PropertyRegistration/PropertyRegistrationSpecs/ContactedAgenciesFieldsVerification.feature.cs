// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LAFTests.PropertyRegistration.PropertyRegistrationSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContactedAgenciesFieldsVerification")]
    public partial class ContactedAgenciesFieldsVerificationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactedAgenciesFieldsVerification.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContactedAgenciesFieldsVerification", "\tIn order to register property for Sell or Rent\r\n\tAs a User\r\n\tI want to be able t" +
                    "o proceed after selecting valid values in Contacted Agencies details.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies001_Verify the Question for Contacted Agencies")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void PropReg_ContactedAgencies001_VerifyTheQuestionForContactedAgencies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies001_Verify the Question for Contacted Agencies", new string[] {
                        "mytag"});
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table1.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "AbilityToGetBestOutcome",
                        "No",
                        ""});
#line 9
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table1, "And ");
#line 12
 testRunner.Then("Q \"Have you started speaking to any agents or agencies about your property?\" shou" +
                    "ld be displayed for Contacted Agencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies002_Verify that link for Moving Forward should be disabl" +
            "ed by default")]
        public virtual void PropReg_ContactedAgencies002_VerifyThatLinkForMovingForwardShouldBeDisabledByDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies002_Verify that link for Moving Forward should be disabl" +
                    "ed by default", ((string[])(null)));
#line 14
 this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table2.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "LocalKnowledegeAndExpertise",
                        "No",
                        ""});
#line 16
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table2, "And ");
#line 19
 testRunner.Then("Moving Forward Link is not enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies003_Verify that Progress section should display filling " +
            "of Specific Agencies Details")]
        public virtual void PropReg_ContactedAgencies003_VerifyThatProgressSectionShouldDisplayFillingOfSpecificAgenciesDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies003_Verify that Progress section should display filling " +
                    "of Specific Agencies Details", ((string[])(null)));
#line 21
 this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table3.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "LocalKnowledegeAndExpertise",
                        "No",
                        ""});
#line 23
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table3, "And ");
#line 26
 testRunner.Then("Progress section displays filling of Specific Agencies Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies004_Verify that option \"YES\" should be available for Con" +
            "tacted Agencies.")]
        public virtual void PropReg_ContactedAgencies004_VerifyThatOptionYESShouldBeAvailableForContactedAgencies_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies004_Verify that option \"YES\" should be available for Con" +
                    "tacted Agencies.", ((string[])(null)));
#line 28
 this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table4.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "TrustworthinessAndReliability",
                        "No",
                        ""});
#line 30
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table4, "And ");
#line 33
 testRunner.Then("Option Yes  with text \"YES\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies005_Verify that option \"NO\" should be available for Cont" +
            "acted Agencies.")]
        public virtual void PropReg_ContactedAgencies005_VerifyThatOptionNOShouldBeAvailableForContactedAgencies_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies005_Verify that option \"NO\" should be available for Cont" +
                    "acted Agencies.", ((string[])(null)));
#line 35
 this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table5.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "PatienceAndUnderstanding",
                        "No",
                        ""});
#line 37
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table5, "And ");
#line 40
 testRunner.Then("Option No  with text \"NO\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies006_Verify that Urgency section should be displayed when" +
            " user selects \"NO\" for Contacted Agencies")]
        public virtual void PropReg_ContactedAgencies006_VerifyThatUrgencySectionShouldBeDisplayedWhenUserSelectsNOForContactedAgencies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies006_Verify that Urgency section should be displayed when" +
                    " user selects \"NO\" for Contacted Agencies", ((string[])(null)));
#line 42
 this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table6.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "PatienceAndUnderstanding",
                        "No",
                        ""});
#line 44
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table6, "And ");
#line 47
 testRunner.When("I Select option as \"No\" for Contacted Agencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("Urgency section should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies007_Verify that field for entering Contacted Agencies De" +
            "tails should be available when option Yes is selected")]
        public virtual void PropReg_ContactedAgencies007_VerifyThatFieldForEnteringContactedAgenciesDetailsShouldBeAvailableWhenOptionYesIsSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies007_Verify that field for entering Contacted Agencies De" +
                    "tails should be available when option Yes is selected", ((string[])(null)));
#line 50
 this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table7.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "PatienceAndUnderstanding",
                        "No",
                        ""});
#line 52
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table7, "And ");
#line 55
 testRunner.When("I Click Option YES for Contacted Agencies Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("Field for entering Contacted Agencies Details should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_ContactedAgencies008_Verify that error is displayed for empty Contacted A" +
            "gencies Details field")]
        public virtual void PropReg_ContactedAgencies008_VerifyThatErrorIsDisplayedForEmptyContactedAgenciesDetailsField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_ContactedAgencies008_Verify that error is displayed for empty Contacted A" +
                    "gencies Details field", ((string[])(null)));
#line 58
 this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I am on PropertyListing Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Category",
                        "PropType",
                        "Beds",
                        "ApproxValue",
                        "UnitAppNo",
                        "StreetNo",
                        "Street",
                        "Suburb",
                        "State",
                        "PostCode",
                        "Leased",
                        "LeasingDetails",
                        "AgentQuality",
                        "SpecificAgency",
                        "SpecificAgenciesDetails"});
            table8.AddRow(new string[] {
                        "Sell",
                        "House",
                        "One",
                        "LessThanTwoHunderedK",
                        "Unit 2",
                        "myStreet1",
                        "Harlem St",
                        "Inglewood",
                        "NSW",
                        "3137",
                        "MyHome",
                        "",
                        "PatienceAndUnderstanding",
                        "No",
                        ""});
#line 60
 testRunner.And("I navigate to Contacted Agencies section after entering details", ((string)(null)), table8, "And ");
#line 63
 testRunner.When("I Click Option YES for Contacted Agencies Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.And("I Click Next without entering Contacted Agencies Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("Error is displayed for empty Contacted Agencies Details field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
