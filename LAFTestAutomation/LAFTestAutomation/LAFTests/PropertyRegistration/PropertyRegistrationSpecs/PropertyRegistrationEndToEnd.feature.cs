// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LAFTests.PropertyRegistration.PropertyRegistrationSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PropertyRegistrationEndToEnd")]
    public partial class PropertyRegistrationEndToEndFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PropertyRegistrationEndToEnd.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PropertyRegistrationEndToEnd", "\tIn order to compare agents for selling property\r\n\tAs a User\r\n\tI want to be able " +
                    "to register property for sell", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User Registers Property")]
        [NUnit.Framework.CategoryAttribute("EndToEnd")]
        [NUnit.Framework.TestCaseAttribute("Sell", "House", "One", "LessThanTwoHunderedK", "Unit1,myStreet,Notlen St,Ringwood,VIC,3134", "MyHome", "Details", "AbilityToGetBestOutcome", "No", "Specific Agencies", "No", "Contacted Agencies", "Immediately", "First,Last,a@Kqr.com,0416789754", "Yes", "Details", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Sell", "Unit", "Two", "TwoHunderedKToFourHunderedK", "Unit2,myStreet1,Harlem St,Inglewood,NSW,3137", "VacantProperty", "Description of Vacant Property", "LocalKnowledegeAndExpertise", "Yes", "Name of Agencies Considered", "Yes", "Name of Agencies Spoken To", "ZeroToThreeMonths", "FirstA,LastA,a@LKstA.com,0416785664", "No", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Rent", "Apartment", "Four", "LessThanTwoHundered", "Unit4,myStreet3,Gotham St,xyzland,VIC,3139", "TenantedProperty", "Description of Tenanted Property", "TrustworthinessAndReliability", "No", "", "No", "", "ThreeToSixMonths", "FirstABC,LastABC,a@LKastBACD.com,0416789634", "No", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Rent", "Townhouse", "One", "TwoHunderedToThreeHundered", "Unit5,myStreet4,Wolverine St,Goldland,NSW,3140", "VacantProperty", "Description of Tenanted Property", "PatienceAndUnderstanding", "Yes", "Name of Agencies Considered", "Yes", "Name of Agencies Spoken To", "SixPlusMonths", "FirstABCD,LastABCD,a@LKastACCCBD.com,0416789634", "No", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Rent", "Villa", "Two", "ThreeHunderedToFourHundered", "Unit6,myStreet5,Nighthawk St,Silverland,QLD,3141", "TenantedProperty", "Description of Tenanted Property", "PatienceAndUnderstanding", "No", "", "No", "", "SixPlusMonths", "FirstABCDE,LastABCDE,a@LKastACEERDS.com,0416789634", "No", "", new string[0])]
        public virtual void UserRegistersProperty(
                    string category, 
                    string propType, 
                    string beds, 
                    string approxValue, 
                    string address, 
                    string leased, 
                    string leasingDetails, 
                    string agentQuality, 
                    string specificAgency, 
                    string specificAgenciesDetails, 
                    string contactedAgency, 
                    string contactedAgenciesDetails, 
                    string urgency, 
                    string customerDetails, 
                    string customerDirectConnectAnswer, 
                    string directConnectDetails, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EndToEnd"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User Registers Property", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("User is on LAF Home Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("User Navigates to Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When(string.Format("User Enters the Details As \'{0}\'  \'{1}\'  \'{2}\'  \'{3}\'  \'{4}\'  \'{5}\'  \'{6}\'  \'{7}\'" +
                        "  \'{8}\'  \'{9}\'  \'{10}\'  \'{11}\'  \'{12}\'  \'{13}\'  \'{14}\'  \'{15}\'", category, propType, beds, approxValue, address, leased, leasingDetails, agentQuality, specificAgency, specificAgenciesDetails, contactedAgency, contactedAgenciesDetails, urgency, customerDetails, customerDirectConnectAnswer, directConnectDetails), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
    testRunner.Then("Property should be registered successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
