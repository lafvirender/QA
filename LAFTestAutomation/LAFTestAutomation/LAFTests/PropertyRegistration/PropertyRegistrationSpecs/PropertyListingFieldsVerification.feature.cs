// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LAFTests.PropertyRegistration.PropertyRegistrationSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PropertyListingFieldsVerification")]
    public partial class PropertyListingFieldsVerificationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PropertyListingFieldsVerification.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PropertyListingFieldsVerification", "\tIn order to register property for Sell or Rent\r\n\tAs a User\r\n\tI want to be able t" +
                    "o proceed after selecting/entering valid data in different fields and proper err" +
                    "or messages should be displayed on entering invalid data.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing001_Verify the Question for Property Listing options on Regist" +
            "ration Page.")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void PropReg_PropListing001_VerifyTheQuestionForPropertyListingOptionsOnRegistrationPage_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing001_Verify the Question for Property Listing options on Regist" +
                    "ration Page.", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Then("Question \"Are you looking to sell or rent your property?\" should be displayed for" +
                    " Property Listing options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing002_Verify that Property Listing category \"Rent\" should be ava" +
            "ilable on Registration Page.")]
        public virtual void PropReg_PropListing002_VerifyThatPropertyListingCategoryRentShouldBeAvailableOnRegistrationPage_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing002_Verify that Property Listing category \"Rent\" should be ava" +
                    "ilable on Registration Page.", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.Then("Listing category Rent with Text \"RENT\" should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing003_Verify that links for Moving Back and Forward should be di" +
            "sabled by default")]
        public virtual void PropReg_PropListing003_VerifyThatLinksForMovingBackAndForwardShouldBeDisabledByDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing003_Verify that links for Moving Back and Forward should be di" +
                    "sabled by default", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.Then("Links for Moving Back and Forward should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing004_Verify that under Progress section, Property should be dis" +
            "played as activated by default.")]
        public virtual void PropReg_PropListing004_VerifyThatUnderProgressSectionPropertyShouldBeDisplayedAsActivatedByDefault_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing004_Verify that under Progress section, Property should be dis" +
                    "played as activated by default.", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.Then("Property Details Progress should be displayed as activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing005_Verify that under Progress section, Property Circle should" +
            " not be displayed as Filled by default.")]
        public virtual void PropReg_PropListing005_VerifyThatUnderProgressSectionPropertyCircleShouldNotBeDisplayedAsFilledByDefault_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing005_Verify that under Progress section, Property Circle should" +
                    " not be displayed as Filled by default.", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.Then("Property Details Progress Circle should be displayed as not filled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing006_Verify that under Progress section, Label \"Property\" shoul" +
            "d be displayed for Property Details progress.")]
        public virtual void PropReg_PropListing006_VerifyThatUnderProgressSectionLabelPropertyShouldBeDisplayedForPropertyDetailsProgress_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing006_Verify that under Progress section, Label \"Property\" shoul" +
                    "d be displayed for Property Details progress.", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.Then("Label \"PROPERTY\" should be displayed for Property Details progress.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing007_Verify that under Progress section, no progress should be " +
            "displayed for Agent details by default.")]
        public virtual void PropReg_PropListing007_VerifyThatUnderProgressSectionNoProgressShouldBeDisplayedForAgentDetailsByDefault_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing007_Verify that under Progress section, no progress should be " +
                    "displayed for Agent details by default.", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.Then("No progress should be displayed for Agent details by default.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing008_Verify that under Progress section, Label \"AGENT\" should b" +
            "e displayed for Agent Details progress.")]
        public virtual void PropReg_PropListing008_VerifyThatUnderProgressSectionLabelAGENTShouldBeDisplayedForAgentDetailsProgress_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing008_Verify that under Progress section, Label \"AGENT\" should b" +
                    "e displayed for Agent Details progress.", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.Then("Label \"AGENT\" should be displayed for Agent Details progress.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing009_Verify that under Progress section, no progress should be " +
            "displayed for Your Details by default.")]
        public virtual void PropReg_PropListing009_VerifyThatUnderProgressSectionNoProgressShouldBeDisplayedForYourDetailsByDefault_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing009_Verify that under Progress section, no progress should be " +
                    "displayed for Your Details by default.", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.Then("No progress should be displayed for Your details by default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing010_Verify that under Progress section, Label \"YOU\" should be " +
            "displayed for Your Details progress.")]
        public virtual void PropReg_PropListing010_VerifyThatUnderProgressSectionLabelYOUShouldBeDisplayedForYourDetailsProgress_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing010_Verify that under Progress section, Label \"YOU\" should be " +
                    "displayed for Your Details progress.", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.Then("Label \"You\" should be displayed for Your Details progress.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing011_Verify that Property Type selection question should be dis" +
            "played when user selects \"Sell\" Category.")]
        public virtual void PropReg_PropListing011_VerifyThatPropertyTypeSelectionQuestionShouldBeDisplayedWhenUserSelectsSellCategory_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing011_Verify that Property Type selection question should be dis" +
                    "played when user selects \"Sell\" Category.", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.When("I Select Sell category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("Property Type selection question should be displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing012_Verify that Property Type selection question should be dis" +
            "played when user selects \"Rent\" Category.")]
        public virtual void PropReg_PropListing012_VerifyThatPropertyTypeSelectionQuestionShouldBeDisplayedWhenUserSelectsRentCategory_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing012_Verify that Property Type selection question should be dis" +
                    "played when user selects \"Rent\" Category.", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When("I Select Rent category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("Property Type selection question should be displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing013_Verify that link for Moving forward is displayed as enable" +
            "d when user moves back to Property Listing from Property Type selection.")]
        public virtual void PropReg_PropListing013_VerifyThatLinkForMovingForwardIsDisplayedAsEnabledWhenUserMovesBackToPropertyListingFromPropertyTypeSelection_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing013_Verify that link for Moving forward is displayed as enable" +
                    "d when user moves back to Property Listing from Property Type selection.", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.When("I Select Rent category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.And("I move back to Property Listing question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.Then("Link for navigating forward is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing014_Verify that Property Type selection question is displayed " +
            "on clicking Forward link on Property Listing..")]
        public virtual void PropReg_PropListing014_VerifyThatPropertyTypeSelectionQuestionIsDisplayedOnClickingForwardLinkOnPropertyListing_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing014_Verify that Property Type selection question is displayed " +
                    "on clicking Forward link on Property Listing..", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("I Select Rent category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("I move back to Property Listing question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.When("Click on Forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("Property Type selection question should be displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing015_Verify that Correct Approximate Value options should be di" +
            "splayed on Registration Page for Rent.")]
        public virtual void PropReg_PropListing015_VerifyThatCorrectApproximateValueOptionsShouldBeDisplayedOnRegistrationPageForRent_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing015_Verify that Correct Approximate Value options should be di" +
                    "splayed on Registration Page for Rent.", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.And("I navigate to Approximate Value selection question for Renting property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ApproximateValues"});
            table1.AddRow(new string[] {
                        "LESS THAN $200"});
            table1.AddRow(new string[] {
                        "$200 TO $300"});
            table1.AddRow(new string[] {
                        "$300 TO $400"});
            table1.AddRow(new string[] {
                        "$400 TO $500"});
            table1.AddRow(new string[] {
                        "$500 TO $700"});
            table1.AddRow(new string[] {
                        "$700 TO $1000"});
            table1.AddRow(new string[] {
                        "$1000 TO $1500"});
            table1.AddRow(new string[] {
                        "$1500+"});
#line 73
 testRunner.Then("Below options should be available under Approximate Values", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing016_Verify that Correct Approximate Value options should be di" +
            "splayed on Registration Page for Sell.")]
        public virtual void PropReg_PropListing016_VerifyThatCorrectApproximateValueOptionsShouldBeDisplayedOnRegistrationPageForSell_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing016_Verify that Correct Approximate Value options should be di" +
                    "splayed on Registration Page for Sell.", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
 testRunner.And("I navigate to Approximate Value selection question for Selling property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ApproximateValues"});
            table2.AddRow(new string[] {
                        "LESS THAN $200K"});
            table2.AddRow(new string[] {
                        "$200K TO $400K"});
            table2.AddRow(new string[] {
                        "$400K TO $600K"});
            table2.AddRow(new string[] {
                        "$600K TO $800K"});
            table2.AddRow(new string[] {
                        "$800K TO $1M"});
            table2.AddRow(new string[] {
                        "$1M TO $1.5M"});
            table2.AddRow(new string[] {
                        "$1.5M TO $2M"});
            table2.AddRow(new string[] {
                        "$2M+"});
#line 87
 testRunner.Then("Below options should be available under Approximate Values.", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing017_Verify the color of option Sell when it is not selected")]
        public virtual void PropReg_PropListing017_VerifyTheColorOfOptionSellWhenItIsNotSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing017_Verify the color of option Sell when it is not selected", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.Then("Color of the Sell option should be \"#00AEFF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing018_Verify that color of the option Sell changes on selection." +
            "")]
        public virtual void PropReg_PropListing018_VerifyThatColorOfTheOptionSellChangesOnSelection_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing018_Verify that color of the option Sell changes on selection." +
                    "", ((string[])(null)));
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.And("I Select Sell category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("I move back to Property Listing question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.Then("Color of the Sell option should be \"#16B24D\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing019_Verify the color of option Rent when it is not selected")]
        public virtual void PropReg_PropListing019_VerifyTheColorOfOptionRentWhenItIsNotSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing019_Verify the color of option Rent when it is not selected", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 109
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
 testRunner.Then("Color of the Rent option should be \"#00AEFF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing020_Verify that color of the option Rent changes on selection." +
            "")]
        public virtual void PropReg_PropListing020_VerifyThatColorOfTheOptionRentChangesOnSelection_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing020_Verify that color of the option Rent changes on selection." +
                    "", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.And("I Select Rent category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("I move back to Property Listing question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.Then("Color of the Rent option should be \"#16B24D\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PropReg_PropListing021_Verify that Listing category \"Sell\" should be available on" +
            " Registration Page.")]
        public virtual void PropReg_PropListing021_VerifyThatListingCategorySellShouldBeAvailableOnRegistrationPage_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PropReg_PropListing021_Verify that Listing category \"Sell\" should be available on" +
                    " Registration Page.", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("User is on Property Registration Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.Then("Listing category Sell with Text \"SELL\" should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
